<UserControl x:Class="PhotoGalleryApp.Views.MediaCollection"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PhotoGalleryApp.Views"
             xmlns:ei="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:converters="clr-namespace:PhotoGalleryApp.Converters"
             xmlns:vms="clr-namespace:PhotoGalleryApp.ViewModels"
             xmlns:utils="clr-namespace:PhotoGalleryApp.Utils"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Loaded="UserControl_Loaded"
             SizeChanged="UserControl_SizeChanged">

    <UserControl.Resources>
        <converters:HeightARToWidthConverter x:Key="HeightARToWidth"/>
        <converters:EventToNameConverter x:Key="EventNameConverter"/>


        <Style x:Key="CollectionThumbnailImage" TargetType="Image">
            <Setter Property="MinHeight" Value="{Binding Path=DataContext.ThumbnailHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"/>
        </Style>

        <Style TargetType="local:MediaCollection">
            <Setter Property="ThumbnailHeight" Value="{Binding ThumbnailHeight}"/>
        </Style>


        <!-- How to display an event -->
        <DataTemplate DataType="{x:Type vms:EventTileViewModel}">
            <Border Margin="0" Padding="0" Background="Transparent" BorderBrush="LightGray" BorderThickness="1">
                <Border.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding Path=DataContext.OpenMediaCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                                  CommandParameter="{Binding}"/>
                </Border.InputBindings>
                <!-- Display the image -->
                <Grid>
                    <Image Style="{StaticResource CollectionThumbnailImage}">
                        <Image.Source>
                            <Binding Path="Thumbnail.ImageData" Mode="OneWay"/>
                        </Image.Source>
                    </Image>

                    <Border
                        Grid.ZIndex="1"
                        Background="White"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Bottom"
                        Margin="10"
                        BorderBrush="Black"
                        BorderThickness="2"
                        Padding="5"
                        >
                        <Label Content="{Binding Name}"/>
                    </Border>
                </Grid>
            </Border>
        </DataTemplate>


        <DataTemplate DataType="{x:Type vms:TimeLabelViewModel}">
            <Label Content="{Binding Label}">
                <Label.Resources>
                    <Style TargetType="{x:Type Label}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Timestamp.Precision}" Value="{x:Static utils:TimeRange.Year}">
                                <Setter Property="FontSize" Value="30"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Timestamp.Precision}" Value="{x:Static utils:TimeRange.Month}">
                                <Setter Property="FontSize" Value="20"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Resources> 
            </Label>
        </DataTemplate>

        <!-- How to display an image -->
        <DataTemplate DataType="{x:Type vms:ImageViewModel}">
            <Border Margin="0,0,0,0" Padding="0,0,0,0" Background="Transparent" BorderThickness="1" BorderBrush="LightGray">
                <Border.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding Path=DataContext.OpenMediaCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                                  CommandParameter="{Binding}"/>
                </Border.InputBindings>
                <!-- Display the image -->
                <Grid>
                    <!-- Display the image -->
                    <Image Style="{StaticResource CollectionThumbnailImage}" Stretch="Uniform">
                        <Image.Source>
                            <Binding Path="ImageData" Mode="OneWay"/>
                        </Image.Source>
                    </Image>

                    <!-- Display a selection button on top of the image -->
                    <ToggleButton 
                        Grid.ZIndex="1" 
                        Width="50" Height="50" 
                        HorizontalAlignment="Left" VerticalAlignment="Top" 
                        Command="{Binding Path=DataContext.SelectMediaCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}" 
                        CommandParameter="{Binding}"
                        IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}"
                        Visibility="{Binding PreviewVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                        >Sel
                    </ToggleButton>
                </Grid>
            </Border>
        </DataTemplate>

        <!-- How to display an video -->
        <DataTemplate DataType="{x:Type vms:VideoViewModel}">
            <Border Margin="0,0,0,0" Padding="0,0,0,0" Background="Transparent" BorderThickness="1" BorderBrush="LightGray">
                <Border.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding Path=DataContext.OpenMediaCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                                  CommandParameter="{Binding}"/>
                </Border.InputBindings>
                <!-- Display the image -->
                <Grid>
                    <Image Style="{StaticResource CollectionThumbnailImage}">
                        <Image.Source>
                            <Binding Path="ThumbnailViewModel.ImageData" Mode="OneWay"/>
                        </Image.Source>
                    </Image>

                    <!-- Display a selection button on top of the image -->
                    <ToggleButton Grid.ZIndex="1" Width="50" Height="50" HorizontalAlignment="Left" VerticalAlignment="Top" 
                                  Command="{Binding Path=DataContext.SelectMediaCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}" 
                                  CommandParameter="{Binding}"
                                  IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}"
                                  Visibility="{Binding PreviewVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                                  >Sel</ToggleButton>

                </Grid>
            </Border>
        </DataTemplate>

        <!-- Horizontal, wrapping collection of items -->
        <Style x:Key="HorizontalWrapItemsControl" TargetType="ItemsControl">
            <!-- Items stored in a wrap panel -->
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        


        <!-- Horizontal, wrapping list of images -->
        <Style x:Key="CollectionListBoxStyle" TargetType="ListBox">
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="SelectionMode" Value="Multiple"/>
            <Setter Property="Padding" Value="0"/>

            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Wrapping, horizontal collection of current tags, each of which is a clickable string. Clicking removes the tag from the image filter -->
        <Style x:Key="FilterTagsList" BasedOn="{StaticResource HorizontalWrapItemsControl}" TargetType="ItemsControl">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Button Content="{Binding}"
                                Command="{Binding Path=DataContext.RemoveTagFromFilterCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MediaCollection}}}"
                                CommandParameter="{Binding}"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ListBoxItemStyle" TargetType="ListBoxItem">
            <!-- Overriding default style avoids occasional binding errors for
                 ContentAlignment when the list is refreshed -->
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border Padding="2">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>


    <Grid Background="Transparent">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <StackPanel 
            Grid.Row="0" 
            x:Name="OptionsPanel"
            Orientation="Horizontal"
            >

            <Button
                Content="Remove Selected"
                IsEnabled="{Binding MediaSelected}"
                >
                <ei:Interaction.Triggers>
                    <ei:EventTrigger EventName="Click">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="RemoveSelected"/>
                    </ei:EventTrigger>
                </ei:Interaction.Triggers>
            </Button>

            <local:ChooserDropDown 
                ItemsSource="{Binding AllTags}" 
                ShowCreateButton="True" ButtonText="Add Tag to Selected"
                IsEnabled="{Binding MediaSelected}"
                >
                <ei:Interaction.Triggers>
                    <ei:EventTrigger EventName="ItemSelected">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="AddTagToSelected"/>
                    </ei:EventTrigger>
                </ei:Interaction.Triggers>
            </local:ChooserDropDown>

            <local:ChooserDropDown
                ItemsSource="{Binding AllTags}"
                ButtonText="Remove Tag from Selected"
                IsEnabled="{Binding MediaSelected}"
                >
                <ei:Interaction.Triggers>
                    <ei:EventTrigger EventName="ItemSelected">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="RemoveTagFromSelected"/>
                    </ei:EventTrigger>
                </ei:Interaction.Triggers>
            </local:ChooserDropDown>

            <Button Content="Add Selected to Event"
                    Command="{Binding AddSelectedToEventCommand}" IsEnabled="{Binding MediaSelected}"
                    />

            <Button Command="{Binding ChangeThumbnailHeightCommand}">Change Thumbnail Height</Button>

            <ToggleButton IsChecked="{Binding ShouldExpandEvents}">Expand Events</ToggleButton>

        </StackPanel> 

        <ScrollViewer
            Grid.Row="1" 
            x:Name="MediaScrollViewer" 
            HorizontalScrollBarVisibility="Disabled" 
            PreviewMouseWheel="ScrollViewer_MouseWheel"
            ScrollChanged="MediaScrollViewer_ScrollChanged"
            >
            <!--
            Make the ScrollChanged event call a command in the view model.
            Gotten from https://stackoverflow.com/questions/25809655/wpf-mvvm-binding-command-to-event 
            -->
            <ei:Interaction.Triggers>
                <ei:EventTrigger EventName="ScrollChanged">
                    <ei:InvokeCommandAction
                        Command="{Binding ScrollChangedCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}}"
                    />
                </ei:EventTrigger>
            </ei:Interaction.Triggers>
            <ListBox
                 x:Name="CollectionListBox" 
                 Style="{StaticResource CollectionListBoxStyle}" 
                 ItemsSource="{Binding Path=MediaView, Mode=OneWay}"
                 ScrollViewer.VerticalScrollBarVisibility="Disabled"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                 ItemContainerStyle="{StaticResource ListBoxItemStyle}"
                >
            </ListBox>
        </ScrollViewer>
    </Grid>
</UserControl>
