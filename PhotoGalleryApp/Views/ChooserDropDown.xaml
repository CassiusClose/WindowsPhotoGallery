<UserControl x:Class="PhotoGalleryApp.Views.ChooserDropDown"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PhotoGalleryApp.Views"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             x:Name="ChooserDropDownControl">

    <!--
    ChooserDropDown is a user control that functions as a drop-down list of items, filterable by what the user enters into
    a textbox. It is similar in function to Gmail's "move to folder" feature. If the "Create New" button is enabled, then when
    the user enters text that does not match an item on the list, one of the options on the list will be to create that
    text as a new item. The user can select different items on the list with the up/down arrow keys. Pressing "Tab" will
    autofill the text and pressing Enter will choose the selected item. When the user chooses an item, an event will fire.
    -->

    <UserControl.Resources>

        <!-- The list of items to display in the drop-down list. -->
        <CollectionViewSource x:Name="ItemsViewSource" x:Key="ItemsViewSource" 
                              Source="{Binding ItemsSource, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ChooserDropDown}}}"
                              Filter="FilterItem"/>


        <!-- The text that is used as the "create new item" button -->
        <System:String x:Key="CreateNewString">Create New</System:String>


        <!-- This collection holds the list of items, as well as the "create new item" button. If that button should be shown, this collection will
        be used as the ItemSource for the dropdown ListBox. Otherwise, it will bind directly to the collection of above. -->
        <CompositeCollection x:Key="ItemsCollection">
            <CollectionContainer Collection="{Binding Source={StaticResource ItemsViewSource}}"/>
            <StaticResource ResourceKey="CreateNewString"/>
        </CompositeCollection>


        <!-- The style for each drop-down list item -->
        <Style TargetType="ListBoxItem">
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ItemClickedOn"/>
        </Style>

        <!-- The template for items in the drop-down list. -->
        <DataTemplate x:Key="DropDownList_ItemTemplate" DataType="ListBoxItem">
            <Label Content="{Binding}"/>
        </DataTemplate>

        <!-- The style for the ListBox that holds the items in the drop-down list. -->
        <Style TargetType="ListBox">
            <Setter Property="SelectedItem" Value="{Binding SelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ChooserDropDown}}}"/>
            <Setter Property="ItemTemplate" Value="{StaticResource DropDownList_ItemTemplate}"/>

            <!-- If the "Create New" button is visible, use the CompositeCollection above (which contains
            the "Create New" string). Otherwise, just bind directly to the collection of items. -->
            <Setter Property="ItemsSource" Value="{Binding Source={StaticResource ItemsViewSource}}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CreateButtonVisible, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ChooserDropDown}}}" Value="True">
                    <Setter Property="ItemsSource" Value="{StaticResource ItemsCollection}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>


    <StackPanel>
        <!-- The textbox where the user enters the filtering text. -->
        <TextBox Name="ChooserDropDownTextBox"
                 Text="{Binding Text, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ChooserDropDown}}}"
                 AcceptsReturn="True" AcceptsTab="True" PreviewKeyDown="Textbox_PreviewKeyDown"
                 GotFocus="Textbox_GotFocus" LostFocus="Textbox_LostFocus">
        </TextBox>

        <!-- The drop down list, which only opens if the user is typing in the above textbox. -->
        <Popup AllowsTransparency="True" Name="DropDownPopup"
               IsOpen="{Binding PopupOpen, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ChooserDropDown}}}">
            <Border Background="LightGray" Name="PopupBorder">
                <StackPanel>
                    <!-- The list of items in the drop-down. -->
                    <ListBox Name="DropDownListBox"/>
                </StackPanel>
            </Border>
        </Popup>
    </StackPanel>

</UserControl>
